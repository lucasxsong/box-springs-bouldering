{"version":3,"sources":["climb-info.js","boulder-modal.js","boulder-info.js","pins.js","map.js","App.js","serviceWorker.js","index.js"],"names":["colors","ClimbInfo","state","activeIndex","handleClick","e","titleProps","index","newIndex","setState","this","climb","props","Accordion","fluid","styled","Title","active","onClick","Table","Row","Cell","Label","color","grade","ribbon","Rating","icon","defaultRating","stars","maxRating","size","disabled","Header","name","height","Content","Grid","columns","Column","width","fa","desc","Component","BoulderModal","Modal","closeIcon","trigger","Button","image","scrolling","stackable","Sticky","className","as","style","marginTop","backgroundColor","info","boulder","Image","rounded","src","Description","Message","Body","climbs","map","BoulderInfo","modalInfo","_openModal","showModal","Card","Meta","area","numClimbs","PureComponent","Pins","data","city","key","longitude","latitude","viewBox","cursor","fill","stroke","transform","d","Map","viewport","zoom","bearing","pitch","popupInfo","_sourceRef","React","createRef","_onViewportChange","_onClick","event","feature","features","clusterId","properties","cluster_id","current","getSource","getClusterExpansionZoom","err","geometry","coordinates","transitionDuration","_onClickMarker","display","tipSize","anchor","closeOnClick","onClose","mapStyle","onViewportChange","mapboxApiAccessToken","process","on_onClick","BOULDERS","_renderPopup","positionOptions","enableHighAccuracy","trackUserLocation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e933168.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n\tAccordion,\n\tTable,\n\tRating,\n\tLabel,\n\tHeader,\n    Grid,\n    Image\n} from 'semantic-ui-react';\n\nconst colors = [\n\t'green',\n\t'green',\n\t'blue',\n\t'blue',\n\t'red',\n\t'red',\n\t'brown',\n\t'brown',\n\t'black',\n\t'black',\n];\n\nexport default class ClimbInfo extends Component {\n\tstate = { activeIndex: null };\n\n\thandleClick = (e, titleProps) => {\n\t\tconst { index } = titleProps;\n\t\tconst { activeIndex } = this.state;\n\t\tconst newIndex = activeIndex === index ? -1 : index;\n\n\t\tthis.setState({ activeIndex: newIndex });\n\t};\n\n\trender() {\n\t\tconst { activeIndex } = this.state;\n\t\tconst { climb } = this.props;\n\t\treturn (\n\t\t\t<Accordion fluid styled>\n\t\t\t\t<Accordion.Title active={0} index={0} onClick={this.handleClick}>\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t<Label color={colors[climb.grade]} ribbon>\n\t\t\t\t\t\t\t\t<b>V{climb.grade}</b>\n\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t<Rating\n\t\t\t\t\t\t\t\ticon=\"star\"\n\t\t\t\t\t\t\t\tdefaultRating={climb.stars}\n\t\t\t\t\t\t\t\tmaxRating={4}\n\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t<Header size=\"medium\">{climb.name}</Header>\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>{climb.height}ft</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Accordion.Title>\n\t\t\t\t<Accordion.Content active={activeIndex === 0}>\n\t\t\t\t\t<Grid columns={3}>\n\t\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t\t<Grid.Column width={4}>\n\t\t\t\t\t\t\t\t<Label>FA: {climb.fa}</Label>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t<Grid.Column width={10}>{climb.desc}</Grid.Column>\n\t\t\t\t\t\t</Grid.Row>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Accordion.Content>\n\t\t\t</Accordion>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport {\n\tButton,\n\tImage,\n\tModal,\n\tTable,\n\tMessage,\n\tGrid,\n\tSticky,\n\tHeader,\n} from 'semantic-ui-react';\nimport ClimbInfo from './climb-info';\nimport './App.css';\n\nconst BoulderModal = (props) => (\n\t<Modal closeIcon trigger={<Button>View Climbs</Button>}>\n\t\t<Modal.Content image scrolling>\n\t\t\t<Grid stackable columns={2}>\n\t\t\t\t<Grid.Row>\n\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t<Sticky>\n\t\t\t\t\t\t\t<div className=\"sticky-wrapper\">\n\t\t\t\t\t\t\t\t<Header\n\t\t\t\t\t\t\t\t\tas=\"h2\"\n\t\t\t\t\t\t\t\t\tclassName=\"boulder-header\"\n\t\t\t\t\t\t\t\t\tstyle={{ marginTop: '10px', backgroundColor: '#fffff' }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{props.info.boulder}\n\t\t\t\t\t\t\t\t</Header>\n\t\t\t\t\t\t\t\t<Image rounded size=\"boulder-image\" src={props.info.image} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Sticky>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t<Modal.Description>\n\t\t\t\t\t\t\t<Table>\n\t\t\t\t\t\t\t\t<Message>\n\t\t\t\t\t\t\t\t\t<p>{props.info.desc}</p>\n\t\t\t\t\t\t\t\t</Message>\n\n\t\t\t\t\t\t\t\t<Table.Body>\n\t\t\t\t\t\t\t\t\t{props.info.climbs.map((climb) => (\n\t\t\t\t\t\t\t\t\t\t<ClimbInfo climb={climb} />\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</Table.Body>\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</Modal.Description>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t</Grid.Row>\n\t\t\t</Grid>\n\t\t</Modal.Content>\n\t</Modal>\n);\n\nexport default BoulderModal;\n","import React, { PureComponent } from 'react';\nimport { Card, Image } from 'semantic-ui-react';\nimport './App.css';\nimport BoulderModal from './boulder-modal';\n\nexport default class BoulderInfo extends PureComponent {\n\tstate = {\n\t\tmodalInfo: null\n\t};\n\n\t_openModal = () => {\n\t\tthis.setState({ showModal: this.info });\n\t};\n\n\n\trender() {\n\t\tconst { info } = this.props;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Card>\n\t\t\t\t\t<Image\n                        src={info.image}\n                        className='boulder-image'\n\t\t\t\t\t/>\n\t\t\t\t\t<Card.Content>\n\t\t\t\t\t\t<Card.Header>{info.boulder}</Card.Header>\n\t\t\t\t\t\t<Card.Meta>{info.area}</Card.Meta>\n\t\t\t\t\t\t<Card.Description>\n                        {info.numClimbs} Climbs\n\t\t\t\t\t\t</Card.Description>\n\t\t\t\t\t</Card.Content>\n                    <BoulderModal info={info}/>\n\t\t\t\t</Card>\n\t\t\t</>\n\t\t);\n\t}\n}\n","import React, {PureComponent} from 'react';\nimport {Marker} from 'react-map-gl';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst SIZE = 25;\n\n// Important for perf: the markers never change, avoid rerender when the map viewport changes\nexport default class Pins extends PureComponent {\n  render() {\n    const {data, onClick} = this.props;\n\n    return data.map((city, index) => (\n      <Marker key={`marker-${index}`} longitude={city.longitude} latitude={city.latitude}>\n        <svg\n          height={SIZE}\n          viewBox=\"0 0 24 24\"\n          style={{\n            cursor: 'pointer',\n            fill: '#FFA500',\n            stroke: 'solid',\n            transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\n          }}\n          onClick={() => onClick(city)}\n        >\n          <path d={ICON} />\n        </svg>\n      </Marker>\n    ));\n  }\n}","import React, { Component } from 'react';\nimport MapGL, { Popup, GeolocateControl } from 'react-map-gl';\nimport './App.css';\n\nimport CityInfo from './boulder-info';\nimport BOULDERS from './boulders.json'\nimport Pins from './pins';\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_KEY; // Set your mapbox token here\n\nexport default class Map extends Component {\n\tstate = {\n\t\tviewport: {\n\t\t\tlatitude: 33.993,\n\t\t\tlongitude: -117.3,\n\t\t\tzoom: 14,\n\t\t\tbearing: 0,\n\t\t\tpitch: 0\n        }, \n        popupInfo: null\n\t};\n\n\t_sourceRef = React.createRef();\n\n\t_onViewportChange = viewport => this.setState({ viewport });\n\n\t_onClick = event => {\n\t\tconst feature = event.features[0];\n\t\tconst clusterId = feature.properties.cluster_id;\n\n\t\tconst mapboxSource = this._sourceRef.current.getSource();\n\n\t\tmapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n\t\t\tif (err) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._onViewportChange({\n\t\t\t\t...this.state.viewport,\n\t\t\t\tlongitude: feature.geometry.coordinates[0],\n\t\t\t\tlatitude: feature.geometry.coordinates[1],\n\t\t\t\tzoom,\n\t\t\t\ttransitionDuration: 500\n\t\t\t});\n\t\t});\n    };\n    \n    _onClickMarker = city => {\n        this.setState({popupInfo: city});\n     };\n\n     _renderPopup() {\n        const {popupInfo} = this.state;\n    \n        return (\n          popupInfo && (\n            <Popup\n            style={{display: 'none !important'}}\n              tipSize={6}\n              anchor=\"top\"\n              longitude={popupInfo.longitude}\n              latitude={popupInfo.latitude}\n              closeOnClick={false}\n              onClose={() => this.setState({popupInfo: null})}\n            >\n              <CityInfo info={popupInfo} />\n            </Popup>\n          )\n        );\n      }\n\n\trender() {\n\t\tconst { viewport } = this.state;\n\n\t\treturn (\n\t\t\t<MapGL\n\t\t\t\t{...viewport}\n\t\t\t\twidth=\"100vw\"\n\t\t\t\theight=\"100vh\"\n\t\t\t\tmapStyle=\"mapbox://styles/mapbox/satellite-v8\"\n\t\t\t\tonViewportChange={this._onViewportChange}\n\t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\n\t\t\t\tonClick={this.on_onClick}\n\t\t\t>\n                <Pins data={BOULDERS} onClick={this._onClickMarker} />\n                {this._renderPopup()}\n\n\t\t\t\t<GeolocateControl\n\t\t\t\t\tpositionOptions={{ enableHighAccuracy: false }}\n\t\t\t\t\ttrackUserLocation={true}\n\t\t\t\t/>\n\t\t\t</MapGL>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './App.css';\n\nimport Map from './map.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}